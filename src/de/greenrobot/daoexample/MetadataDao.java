package de.greenrobot.daoexample;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daoexample.Metadata;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table METADATA.
*/
public class MetadataDao extends AbstractDao<Metadata, Long> {

    public static final String TABLENAME = "METADATA";

    /**
     * Properties of entity Metadata.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Filename = new Property(1, String.class, "filename", false, "FILENAME");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Artist = new Property(3, String.class, "artist", false, "ARTIST");
        public final static Property Album = new Property(4, String.class, "album", false, "ALBUM");
        public final static Property Year = new Property(5, String.class, "year", false, "YEAR");
        public final static Property Comment = new Property(6, String.class, "comment", false, "COMMENT");
        public final static Property Genre = new Property(7, String.class, "genre", false, "GENRE");
        public final static Property Duration_seconds = new Property(8, String.class, "duration_seconds", false, "DURATION_SECONDS");
        public final static Property Composer = new Property(9, String.class, "composer", false, "COMPOSER");
        public final static Property Composer_2 = new Property(10, String.class, "composer_2", false, "COMPOSER_2");
        public final static Property Compilation = new Property(11, String.class, "compilation", false, "COMPILATION");
        public final static Property Producer = new Property(12, String.class, "producer", false, "PRODUCER");
        public final static Property Usertext = new Property(13, String.class, "usertext", false, "USERTEXT");
        public final static Property Isdeleted = new Property(14, Boolean.class, "isdeleted", false, "ISDELETED");
        public final static Property Trackid = new Property(15, Integer.class, "trackid", false, "TRACKID");
        public final static Property Cid = new Property(16, Integer.class, "cid", false, "CID");
        public final static Property Uploadeddate = new Property(17, java.util.Date.class, "uploadeddate", false, "UPLOADEDDATE");
        public final static Property Lastuploadeddate = new Property(18, java.util.Date.class, "lastuploadeddate", false, "LASTUPLOADEDDATE");
        public final static Property Createddate = new Property(19, java.util.Date.class, "createddate", false, "CREATEDDATE");
        public final static Property Lastmodifieddate = new Property(20, java.util.Date.class, "lastmodifieddate", false, "LASTMODIFIEDDATE");
    };


    public MetadataDao(DaoConfig config) {
        super(config);
    }
    
    public MetadataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'METADATA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FILENAME' TEXT," + // 1: filename
                "'TITLE' TEXT," + // 2: title
                "'ARTIST' TEXT," + // 3: artist
                "'ALBUM' TEXT," + // 4: album
                "'YEAR' TEXT," + // 5: year
                "'COMMENT' TEXT," + // 6: comment
                "'GENRE' TEXT," + // 7: genre
                "'DURATION_SECONDS' TEXT," + // 8: duration_seconds
                "'COMPOSER' TEXT," + // 9: composer
                "'COMPOSER_2' TEXT," + // 10: composer_2
                "'COMPILATION' TEXT," + // 11: compilation
                "'PRODUCER' TEXT," + // 12: producer
                "'USERTEXT' TEXT," + // 13: usertext
                "'ISDELETED' INTEGER," + // 14: isdeleted
                "'TRACKID' INTEGER," + // 15: trackid
                "'CID' INTEGER," + // 16: cid
                "'UPLOADEDDATE' INTEGER," + // 17: uploadeddate
                "'LASTUPLOADEDDATE' INTEGER," + // 18: lastuploadeddate
                "'CREATEDDATE' INTEGER," + // 19: createddate
                "'LASTMODIFIEDDATE' INTEGER);"); // 20: lastmodifieddate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'METADATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Metadata entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(2, filename);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(4, artist);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(5, album);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(6, year);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(7, comment);
        }
 
        String genre = entity.getGenre();
        if (genre != null) {
            stmt.bindString(8, genre);
        }
 
        String duration_seconds = entity.getDuration_seconds();
        if (duration_seconds != null) {
            stmt.bindString(9, duration_seconds);
        }
 
        String composer = entity.getComposer();
        if (composer != null) {
            stmt.bindString(10, composer);
        }
 
        String composer_2 = entity.getComposer_2();
        if (composer_2 != null) {
            stmt.bindString(11, composer_2);
        }
 
        String compilation = entity.getCompilation();
        if (compilation != null) {
            stmt.bindString(12, compilation);
        }
 
        String producer = entity.getProducer();
        if (producer != null) {
            stmt.bindString(13, producer);
        }
 
        String usertext = entity.getUsertext();
        if (usertext != null) {
            stmt.bindString(14, usertext);
        }
 
        Boolean isdeleted = entity.getIsdeleted();
        if (isdeleted != null) {
            stmt.bindLong(15, isdeleted ? 1l: 0l);
        }
 
        Integer trackid = entity.getTrackid();
        if (trackid != null) {
            stmt.bindLong(16, trackid);
        }
 
        Integer cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(17, cid);
        }
 
        java.util.Date uploadeddate = entity.getUploadeddate();
        if (uploadeddate != null) {
            stmt.bindLong(18, uploadeddate.getTime());
        }
 
        java.util.Date lastuploadeddate = entity.getLastuploadeddate();
        if (lastuploadeddate != null) {
            stmt.bindLong(19, lastuploadeddate.getTime());
        }
 
        java.util.Date createddate = entity.getCreateddate();
        if (createddate != null) {
            stmt.bindLong(20, createddate.getTime());
        }
 
        java.util.Date lastmodifieddate = entity.getLastmodifieddate();
        if (lastmodifieddate != null) {
            stmt.bindLong(21, lastmodifieddate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Metadata readEntity(Cursor cursor, int offset) {
        Metadata entity = new Metadata( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // filename
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // artist
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // album
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // year
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // comment
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // genre
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // duration_seconds
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // composer
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // composer_2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // compilation
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // producer
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // usertext
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // isdeleted
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // trackid
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // cid
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // uploadeddate
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // lastuploadeddate
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)), // createddate
            cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)) // lastmodifieddate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Metadata entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFilename(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArtist(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAlbum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setYear(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setComment(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGenre(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDuration_seconds(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setComposer(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setComposer_2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCompilation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProducer(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUsertext(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsdeleted(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setTrackid(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setCid(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setUploadeddate(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
        entity.setLastuploadeddate(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setCreateddate(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
        entity.setLastmodifieddate(cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Metadata entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Metadata entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
