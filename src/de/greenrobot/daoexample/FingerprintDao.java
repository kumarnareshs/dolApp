package de.greenrobot.daoexample;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daoexample.Fingerprint;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FINGERPRINT.
*/
public class FingerprintDao extends AbstractDao<Fingerprint, Long> {

    public static final String TABLENAME = "FINGERPRINT";

    /**
     * Properties of entity Fingerprint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cid = new Property(1, Integer.class, "cid", false, "CID");
        public final static Property Filename = new Property(2, String.class, "filename", false, "FILENAME");
        public final static Property Filepath = new Property(3, String.class, "filepath", false, "FILEPATH");
        public final static Property Filelength = new Property(4, String.class, "filelength", false, "FILELENGTH");
        public final static Property Androidmusicid = new Property(5, Long.class, "androidmusicid", false, "ANDROIDMUSICID");
        public final static Property Fileformat = new Property(6, String.class, "fileformat", false, "FILEFORMAT");
        public final static Property Filesize = new Property(7, Float.class, "filesize", false, "FILESIZE");
        public final static Property Filebitrate = new Property(8, Integer.class, "filebitrate", false, "FILEBITRATE");
        public final static Property Filefrequency = new Property(9, Integer.class, "filefrequency", false, "FILEFREQUENCY");
        public final static Property Filenoofchannels = new Property(10, Integer.class, "filenoofchannels", false, "FILENOOFCHANNELS");
        public final static Property Fingerprint = new Property(11, String.class, "fingerprint", false, "FINGERPRINT");
        public final static Property Fulllengthfingerprint = new Property(12, String.class, "fulllengthfingerprint", false, "FULLLENGTHFINGERPRINT");
        public final static Property Fingerprintcreateddate = new Property(13, java.util.Date.class, "fingerprintcreateddate", false, "FINGERPRINTCREATEDDATE");
        public final static Property Isdeleted = new Property(14, Boolean.class, "isdeleted", false, "ISDELETED");
        public final static Property Trackid = new Property(15, Integer.class, "trackid", false, "TRACKID");
        public final static Property IsSongAvailableInServer = new Property(16, Boolean.class, "isSongAvailableInServer", false, "IS_SONG_AVAILABLE_IN_SERVER");
        public final static Property Isfulllengthfingerprintgenerated = new Property(17, Boolean.class, "isfulllengthfingerprintgenerated", false, "ISFULLLENGTHFINGERPRINTGENERATED");
        public final static Property Isfulllengthfingerprintuploaded = new Property(18, Boolean.class, "isfulllengthfingerprintuploaded", false, "ISFULLLENGTHFINGERPRINTUPLOADED");
        public final static Property Status = new Property(19, String.class, "status", false, "STATUS");
        public final static Property Isuploaded = new Property(20, Boolean.class, "isuploaded", false, "ISUPLOADED");
        public final static Property Uploadeddate = new Property(21, java.util.Date.class, "uploadeddate", false, "UPLOADEDDATE");
        public final static Property Lastuploadeddate = new Property(22, java.util.Date.class, "lastuploadeddate", false, "LASTUPLOADEDDATE");
        public final static Property Createddate = new Property(23, java.util.Date.class, "createddate", false, "CREATEDDATE");
        public final static Property Lastmodifieddate = new Property(24, java.util.Date.class, "lastmodifieddate", false, "LASTMODIFIEDDATE");
    };


    public FingerprintDao(DaoConfig config) {
        super(config);
    }
    
    public FingerprintDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FINGERPRINT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CID' INTEGER," + // 1: cid
                "'FILENAME' TEXT," + // 2: filename
                "'FILEPATH' TEXT," + // 3: filepath
                "'FILELENGTH' TEXT," + // 4: filelength
                "'ANDROIDMUSICID' INTEGER," + // 5: androidmusicid
                "'FILEFORMAT' TEXT," + // 6: fileformat
                "'FILESIZE' REAL," + // 7: filesize
                "'FILEBITRATE' INTEGER," + // 8: filebitrate
                "'FILEFREQUENCY' INTEGER," + // 9: filefrequency
                "'FILENOOFCHANNELS' INTEGER," + // 10: filenoofchannels
                "'FINGERPRINT' TEXT," + // 11: fingerprint
                "'FULLLENGTHFINGERPRINT' TEXT," + // 12: fulllengthfingerprint
                "'FINGERPRINTCREATEDDATE' INTEGER," + // 13: fingerprintcreateddate
                "'ISDELETED' INTEGER," + // 14: isdeleted
                "'TRACKID' INTEGER," + // 15: trackid
                "'IS_SONG_AVAILABLE_IN_SERVER' INTEGER," + // 16: isSongAvailableInServer
                "'ISFULLLENGTHFINGERPRINTGENERATED' INTEGER," + // 17: isfulllengthfingerprintgenerated
                "'ISFULLLENGTHFINGERPRINTUPLOADED' INTEGER," + // 18: isfulllengthfingerprintuploaded
                "'STATUS' TEXT," + // 19: status
                "'ISUPLOADED' INTEGER," + // 20: isuploaded
                "'UPLOADEDDATE' INTEGER," + // 21: uploadeddate
                "'LASTUPLOADEDDATE' INTEGER," + // 22: lastuploadeddate
                "'CREATEDDATE' INTEGER," + // 23: createddate
                "'LASTMODIFIEDDATE' INTEGER);"); // 24: lastmodifieddate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FINGERPRINT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Fingerprint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(2, cid);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(3, filename);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(4, filepath);
        }
 
        String filelength = entity.getFilelength();
        if (filelength != null) {
            stmt.bindString(5, filelength);
        }
 
        Long androidmusicid = entity.getAndroidmusicid();
        if (androidmusicid != null) {
            stmt.bindLong(6, androidmusicid);
        }
 
        String fileformat = entity.getFileformat();
        if (fileformat != null) {
            stmt.bindString(7, fileformat);
        }
 
        Float filesize = entity.getFilesize();
        if (filesize != null) {
            stmt.bindDouble(8, filesize);
        }
 
        Integer filebitrate = entity.getFilebitrate();
        if (filebitrate != null) {
            stmt.bindLong(9, filebitrate);
        }
 
        Integer filefrequency = entity.getFilefrequency();
        if (filefrequency != null) {
            stmt.bindLong(10, filefrequency);
        }
 
        Integer filenoofchannels = entity.getFilenoofchannels();
        if (filenoofchannels != null) {
            stmt.bindLong(11, filenoofchannels);
        }
 
        String fingerprint = entity.getFingerprint();
        if (fingerprint != null) {
            stmt.bindString(12, fingerprint);
        }
 
        String fulllengthfingerprint = entity.getFulllengthfingerprint();
        if (fulllengthfingerprint != null) {
            stmt.bindString(13, fulllengthfingerprint);
        }
 
        java.util.Date fingerprintcreateddate = entity.getFingerprintcreateddate();
        if (fingerprintcreateddate != null) {
            stmt.bindLong(14, fingerprintcreateddate.getTime());
        }
 
        Boolean isdeleted = entity.getIsdeleted();
        if (isdeleted != null) {
            stmt.bindLong(15, isdeleted ? 1l: 0l);
        }
 
        Integer trackid = entity.getTrackid();
        if (trackid != null) {
            stmt.bindLong(16, trackid);
        }
 
        Boolean isSongAvailableInServer = entity.getIsSongAvailableInServer();
        if (isSongAvailableInServer != null) {
            stmt.bindLong(17, isSongAvailableInServer ? 1l: 0l);
        }
 
        Boolean isfulllengthfingerprintgenerated = entity.getIsfulllengthfingerprintgenerated();
        if (isfulllengthfingerprintgenerated != null) {
            stmt.bindLong(18, isfulllengthfingerprintgenerated ? 1l: 0l);
        }
 
        Boolean isfulllengthfingerprintuploaded = entity.getIsfulllengthfingerprintuploaded();
        if (isfulllengthfingerprintuploaded != null) {
            stmt.bindLong(19, isfulllengthfingerprintuploaded ? 1l: 0l);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(20, status);
        }
 
        Boolean isuploaded = entity.getIsuploaded();
        if (isuploaded != null) {
            stmt.bindLong(21, isuploaded ? 1l: 0l);
        }
 
        java.util.Date uploadeddate = entity.getUploadeddate();
        if (uploadeddate != null) {
            stmt.bindLong(22, uploadeddate.getTime());
        }
 
        java.util.Date lastuploadeddate = entity.getLastuploadeddate();
        if (lastuploadeddate != null) {
            stmt.bindLong(23, lastuploadeddate.getTime());
        }
 
        java.util.Date createddate = entity.getCreateddate();
        if (createddate != null) {
            stmt.bindLong(24, createddate.getTime());
        }
 
        java.util.Date lastmodifieddate = entity.getLastmodifieddate();
        if (lastmodifieddate != null) {
            stmt.bindLong(25, lastmodifieddate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Fingerprint readEntity(Cursor cursor, int offset) {
        Fingerprint entity = new Fingerprint( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // cid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // filename
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // filepath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // filelength
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // androidmusicid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fileformat
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // filesize
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // filebitrate
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // filefrequency
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // filenoofchannels
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fingerprint
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fulllengthfingerprint
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // fingerprintcreateddate
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // isdeleted
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // trackid
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // isSongAvailableInServer
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // isfulllengthfingerprintgenerated
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // isfulllengthfingerprintuploaded
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // status
            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0, // isuploaded
            cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)), // uploadeddate
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // lastuploadeddate
            cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)), // createddate
            cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)) // lastmodifieddate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Fingerprint entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFilename(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFilepath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFilelength(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAndroidmusicid(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setFileformat(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFilesize(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setFilebitrate(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setFilefrequency(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setFilenoofchannels(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setFingerprint(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFulllengthfingerprint(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFingerprintcreateddate(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setIsdeleted(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setTrackid(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setIsSongAvailableInServer(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setIsfulllengthfingerprintgenerated(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setIsfulllengthfingerprintuploaded(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setStatus(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIsuploaded(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
        entity.setUploadeddate(cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)));
        entity.setLastuploadeddate(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setCreateddate(cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)));
        entity.setLastmodifieddate(cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Fingerprint entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Fingerprint entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
